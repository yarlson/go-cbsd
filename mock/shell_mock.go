// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"
)

// ExecMock is a mock implementation of cbsd.Exec.
//
//     func TestSomethingThatUsesExec(t *testing.T) {
//
//         // make and configure a mocked cbsd.Exec
//         mockedExec := &ExecMock{
//             CommandFunc: func(ctx context.Context, name string, arg ...string) ([]byte, error) {
// 	               panic("mock out the Command method")
//             },
//             CommandWithInterfaceFunc: func(ctx context.Context, name string, i interface{}, arg ...string) ([]byte, error) {
// 	               panic("mock out the CommandWithInterface method")
//             },
//             SetEnvFunc: func(name string, value string)  {
// 	               panic("mock out the SetEnv method")
//             },
//         }
//
//         // use mockedExec in code that requires cbsd.Exec
//         // and then make assertions.
//
//     }
type ExecMock struct {
	// CommandFunc mocks the Command method.
	CommandFunc func(ctx context.Context, name string, arg ...string) ([]byte, error)

	// CommandWithInterfaceFunc mocks the CommandWithInterface method.
	CommandWithInterfaceFunc func(ctx context.Context, name string, i interface{}, arg ...string) ([]byte, error)

	// SetEnvFunc mocks the SetEnv method.
	SetEnvFunc func(name string, value string)

	// calls tracks calls to the methods.
	calls struct {
		// Command holds details about calls to the Command method.
		Command []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Arg is the arg argument value.
			Arg []string
		}
		// CommandWithInterface holds details about calls to the CommandWithInterface method.
		CommandWithInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// I is the i argument value.
			I interface{}
			// Arg is the arg argument value.
			Arg []string
		}
		// SetEnv holds details about calls to the SetEnv method.
		SetEnv []struct {
			// Name is the name argument value.
			Name string
			// Value is the value argument value.
			Value string
		}
	}
	lockCommand              sync.RWMutex
	lockCommandWithInterface sync.RWMutex
	lockSetEnv               sync.RWMutex
}

// Command calls CommandFunc.
func (mock *ExecMock) Command(ctx context.Context, name string, arg ...string) ([]byte, error) {
	if mock.CommandFunc == nil {
		panic("ExecMock.CommandFunc: method is nil but Exec.Command was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Arg  []string
	}{
		Ctx:  ctx,
		Name: name,
		Arg:  arg,
	}
	mock.lockCommand.Lock()
	mock.calls.Command = append(mock.calls.Command, callInfo)
	mock.lockCommand.Unlock()
	return mock.CommandFunc(ctx, name, arg...)
}

// CommandCalls gets all the calls that were made to Command.
// Check the length with:
//     len(mockedExec.CommandCalls())
func (mock *ExecMock) CommandCalls() []struct {
	Ctx  context.Context
	Name string
	Arg  []string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Arg  []string
	}
	mock.lockCommand.RLock()
	calls = mock.calls.Command
	mock.lockCommand.RUnlock()
	return calls
}

// CommandWithInterface calls CommandWithInterfaceFunc.
func (mock *ExecMock) CommandWithInterface(ctx context.Context, name string, i interface{}, arg ...string) ([]byte, error) {
	if mock.CommandWithInterfaceFunc == nil {
		panic("ExecMock.CommandWithInterfaceFunc: method is nil but Exec.CommandWithInterface was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		I    interface{}
		Arg  []string
	}{
		Ctx:  ctx,
		Name: name,
		I:    i,
		Arg:  arg,
	}
	mock.lockCommandWithInterface.Lock()
	mock.calls.CommandWithInterface = append(mock.calls.CommandWithInterface, callInfo)
	mock.lockCommandWithInterface.Unlock()
	return mock.CommandWithInterfaceFunc(ctx, name, i, arg...)
}

// CommandWithInterfaceCalls gets all the calls that were made to CommandWithInterface.
// Check the length with:
//     len(mockedExec.CommandWithInterfaceCalls())
func (mock *ExecMock) CommandWithInterfaceCalls() []struct {
	Ctx  context.Context
	Name string
	I    interface{}
	Arg  []string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		I    interface{}
		Arg  []string
	}
	mock.lockCommandWithInterface.RLock()
	calls = mock.calls.CommandWithInterface
	mock.lockCommandWithInterface.RUnlock()
	return calls
}

// SetEnv calls SetEnvFunc.
func (mock *ExecMock) SetEnv(name string, value string) {
	if mock.SetEnvFunc == nil {
		panic("ExecMock.SetEnvFunc: method is nil but Exec.SetEnv was just called")
	}
	callInfo := struct {
		Name  string
		Value string
	}{
		Name:  name,
		Value: value,
	}
	mock.lockSetEnv.Lock()
	mock.calls.SetEnv = append(mock.calls.SetEnv, callInfo)
	mock.lockSetEnv.Unlock()
	mock.SetEnvFunc(name, value)
}

// SetEnvCalls gets all the calls that were made to SetEnv.
// Check the length with:
//     len(mockedExec.SetEnvCalls())
func (mock *ExecMock) SetEnvCalls() []struct {
	Name  string
	Value string
} {
	var calls []struct {
		Name  string
		Value string
	}
	mock.lockSetEnv.RLock()
	calls = mock.calls.SetEnv
	mock.lockSetEnv.RUnlock()
	return calls
}
